{"ast":null,"code":"/**\n * react-query\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n!function (t, e) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? e(exports, require(\"react\"), require(\"use-sync-external-store/shim\")) : \"function\" == typeof define && define.amd ? define([\"exports\", \"react\", \"use-sync-external-store/shim\"], e) : e((t = \"undefined\" != typeof globalThis ? globalThis : t || self).ReactQuery = {}, t.React, t.shim);\n}(this, function (t, e, s) {\n  \"use strict\";\n\n  function r(t) {\n    if (t && t.__esModule) return t;\n    var e = Object.create(null);\n    return t && Object.keys(t).forEach(function (s) {\n      if (\"default\" !== s) {\n        var r = Object.getOwnPropertyDescriptor(t, s);\n        Object.defineProperty(e, s, r.get ? r : {\n          enumerable: !0,\n          get: function () {\n            return t[s];\n          }\n        });\n      }\n    }), e.default = t, Object.freeze(e);\n  }\n\n  var i = r(e);\n  /**\n     * query-core\n     *\n     * Copyright (c) TanStack\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE.md file in the root directory of this source tree.\n     *\n     * @license MIT\n     */\n\n  class n {\n    constructor() {\n      this.listeners = [], this.subscribe = this.subscribe.bind(this);\n    }\n\n    subscribe(t) {\n      return this.listeners.push(t), this.onSubscribe(), () => {\n        this.listeners = this.listeners.filter(e => e !== t), this.onUnsubscribe();\n      };\n    }\n\n    hasListeners() {\n      return this.listeners.length > 0;\n    }\n\n    onSubscribe() {}\n\n    onUnsubscribe() {}\n\n  }\n\n  const a = \"undefined\" == typeof window;\n\n  function o() {}\n\n  function u(t) {\n    return \"number\" == typeof t && t >= 0 && t !== 1 / 0;\n  }\n\n  function c(t, e) {\n    return t.filter(t => -1 === e.indexOf(t));\n  }\n\n  function h(t, e) {\n    return Math.max(t + (e || 0) - Date.now(), 0);\n  }\n\n  function l(t, e, s) {\n    return S(t) ? \"function\" == typeof e ? { ...s,\n      queryKey: t,\n      queryFn: e\n    } : { ...e,\n      queryKey: t\n    } : t;\n  }\n\n  function d(t, e, s) {\n    return S(t) ? \"function\" == typeof e ? { ...s,\n      mutationKey: t,\n      mutationFn: e\n    } : { ...e,\n      mutationKey: t\n    } : \"function\" == typeof t ? { ...e,\n      mutationFn: t\n    } : { ...t\n    };\n  }\n\n  function f(t, e, s) {\n    return S(t) ? [{ ...e,\n      queryKey: t\n    }, s] : [t || {}, e];\n  }\n\n  function p(t, e, s) {\n    return S(t) ? [{ ...e,\n      mutationKey: t\n    }, s] : [t || {}, e];\n  }\n\n  function y(t, e) {\n    const {\n      type: s = \"all\",\n      exact: r,\n      fetchStatus: i,\n      predicate: n,\n      queryKey: a,\n      stale: o\n    } = t;\n    if (S(a)) if (r) {\n      if (e.queryHash !== m(a, e.options)) return !1;\n    } else if (!g(e.queryKey, a)) return !1;\n\n    if (\"all\" !== s) {\n      const t = e.isActive();\n      if (\"active\" === s && !t) return !1;\n      if (\"inactive\" === s && t) return !1;\n    }\n\n    return (\"boolean\" != typeof o || e.isStale() === o) && (void 0 === i || i === e.state.fetchStatus) && !(n && !n(e));\n  }\n\n  function v(t, e) {\n    const {\n      exact: s,\n      fetching: r,\n      predicate: i,\n      mutationKey: n\n    } = t;\n\n    if (S(n)) {\n      if (!e.options.mutationKey) return !1;\n\n      if (s) {\n        if (b(e.options.mutationKey) !== b(n)) return !1;\n      } else if (!g(e.options.mutationKey, n)) return !1;\n    }\n\n    return (\"boolean\" != typeof r || \"loading\" === e.state.status === r) && !(i && !i(e));\n  }\n\n  function m(t, e) {\n    return ((null == e ? void 0 : e.queryKeyHashFn) || b)(t);\n  }\n\n  function b(t) {\n    return JSON.stringify(t, (t, e) => q(e) ? Object.keys(e).sort().reduce((t, s) => (t[s] = e[s], t), {}) : e);\n  }\n\n  function g(t, e) {\n    return O(t, e);\n  }\n\n  function O(t, e) {\n    return t === e || typeof t == typeof e && !(!t || !e || \"object\" != typeof t || \"object\" != typeof e) && !Object.keys(e).some(s => !O(t[s], e[s]));\n  }\n\n  function C(t, e) {\n    if (t === e) return t;\n    const s = R(t) && R(e);\n\n    if (s || q(t) && q(e)) {\n      const r = s ? t.length : Object.keys(t).length,\n            i = s ? e : Object.keys(e),\n            n = i.length,\n            a = s ? [] : {};\n      let o = 0;\n\n      for (let r = 0; r < n; r++) {\n        const n = s ? r : i[r];\n        a[n] = C(t[n], e[n]), a[n] === t[n] && o++;\n      }\n\n      return r === n && o === r ? t : a;\n    }\n\n    return e;\n  }\n\n  function R(t) {\n    return Array.isArray(t) && t.length === Object.keys(t).length;\n  }\n\n  function q(t) {\n    if (!P(t)) return !1;\n    const e = t.constructor;\n    if (void 0 === e) return !0;\n    const s = e.prototype;\n    return !!P(s) && !!s.hasOwnProperty(\"isPrototypeOf\");\n  }\n\n  function P(t) {\n    return \"[object Object]\" === Object.prototype.toString.call(t);\n  }\n\n  function S(t) {\n    return Array.isArray(t);\n  }\n\n  function Q(t) {\n    return new Promise(e => {\n      setTimeout(e, t);\n    });\n  }\n\n  function E(t) {\n    Q(0).then(t);\n  }\n\n  function x(t, e, s) {\n    return null != s.isDataEqual && s.isDataEqual(t, e) ? t : !1 !== s.structuralSharing ? C(t, e) : e;\n  }\n\n  const M = new class extends n {\n    constructor() {\n      super(), this.setup = t => {\n        if (!a && window.addEventListener) {\n          const e = () => t();\n\n          return window.addEventListener(\"visibilitychange\", e, !1), window.addEventListener(\"focus\", e, !1), () => {\n            window.removeEventListener(\"visibilitychange\", e), window.removeEventListener(\"focus\", e);\n          };\n        }\n      };\n    }\n\n    onSubscribe() {\n      this.cleanup || this.setEventListener(this.setup);\n    }\n\n    onUnsubscribe() {\n      var t;\n      this.hasListeners() || (null == (t = this.cleanup) || t.call(this), this.cleanup = void 0);\n    }\n\n    setEventListener(t) {\n      var e;\n      this.setup = t, null == (e = this.cleanup) || e.call(this), this.cleanup = t(t => {\n        \"boolean\" == typeof t ? this.setFocused(t) : this.onFocus();\n      });\n    }\n\n    setFocused(t) {\n      this.focused = t, t && this.onFocus();\n    }\n\n    onFocus() {\n      this.listeners.forEach(t => {\n        t();\n      });\n    }\n\n    isFocused() {\n      return \"boolean\" == typeof this.focused ? this.focused : \"undefined\" == typeof document || [void 0, \"visible\", \"prerender\"].includes(document.visibilityState);\n    }\n\n  }();\n  const w = new class extends n {\n    constructor() {\n      super(), this.setup = t => {\n        if (!a && window.addEventListener) {\n          const e = () => t();\n\n          return window.addEventListener(\"online\", e, !1), window.addEventListener(\"offline\", e, !1), () => {\n            window.removeEventListener(\"online\", e), window.removeEventListener(\"offline\", e);\n          };\n        }\n      };\n    }\n\n    onSubscribe() {\n      this.cleanup || this.setEventListener(this.setup);\n    }\n\n    onUnsubscribe() {\n      var t;\n      this.hasListeners() || (null == (t = this.cleanup) || t.call(this), this.cleanup = void 0);\n    }\n\n    setEventListener(t) {\n      var e;\n      this.setup = t, null == (e = this.cleanup) || e.call(this), this.cleanup = t(t => {\n        \"boolean\" == typeof t ? this.setOnline(t) : this.onOnline();\n      });\n    }\n\n    setOnline(t) {\n      this.online = t, t && this.onOnline();\n    }\n\n    onOnline() {\n      this.listeners.forEach(t => {\n        t();\n      });\n    }\n\n    isOnline() {\n      return \"boolean\" == typeof this.online ? this.online : \"undefined\" == typeof navigator || void 0 === navigator.onLine || navigator.onLine;\n    }\n\n  }();\n\n  function F(t) {\n    return Math.min(1e3 * 2 ** t, 3e4);\n  }\n\n  function A(t) {\n    return \"online\" !== (null != t ? t : \"online\") || w.isOnline();\n  }\n\n  class D {\n    constructor(t) {\n      this.revert = null == t ? void 0 : t.revert, this.silent = null == t ? void 0 : t.silent;\n    }\n\n  }\n\n  function I(t) {\n    return t instanceof D;\n  }\n\n  function U(t) {\n    let e,\n        s,\n        r,\n        i = !1,\n        n = 0,\n        a = !1;\n\n    const o = new Promise((t, e) => {\n      s = t, r = e;\n    }),\n          u = () => !M.isFocused() || \"always\" !== t.networkMode && !w.isOnline(),\n          c = r => {\n      a || (a = !0, null == t.onSuccess || t.onSuccess(r), null == e || e(), s(r));\n    },\n          h = s => {\n      a || (a = !0, null == t.onError || t.onError(s), null == e || e(), r(s));\n    },\n          l = () => new Promise(s => {\n      e = t => {\n        if (a || !u()) return s(t);\n      }, null == t.onPause || t.onPause();\n    }).then(() => {\n      e = void 0, a || null == t.onContinue || t.onContinue();\n    }),\n          d = () => {\n      if (a) return;\n      let e;\n\n      try {\n        e = t.fn();\n      } catch (t) {\n        e = Promise.reject(t);\n      }\n\n      Promise.resolve(e).then(c).catch(e => {\n        var s, r;\n        if (a) return;\n        const o = null != (s = t.retry) ? s : 3,\n              c = null != (r = t.retryDelay) ? r : F,\n              f = \"function\" == typeof c ? c(n, e) : c,\n              p = !0 === o || \"number\" == typeof o && n < o || \"function\" == typeof o && o(n, e);\n        !i && p ? (n++, null == t.onFail || t.onFail(n, e), Q(f).then(() => {\n          if (u()) return l();\n        }).then(() => {\n          i ? h(e) : d();\n        })) : h(e);\n      });\n    };\n\n    return A(t.networkMode) ? d() : l().then(d), {\n      promise: o,\n      cancel: e => {\n        a || (h(new D(e)), null == t.abort || t.abort());\n      },\n      continue: () => {\n        null == e || e();\n      },\n      cancelRetry: () => {\n        i = !0;\n      },\n      continueRetry: () => {\n        i = !1;\n      }\n    };\n  }\n\n  const T = console;\n\n  const K = function () {\n    let t = [],\n        e = 0,\n        s = t => {\n      t();\n    },\n        r = t => {\n      t();\n    };\n\n    const i = r => {\n      e ? t.push(r) : E(() => {\n        s(r);\n      });\n    },\n          n = () => {\n      const e = t;\n      t = [], e.length && E(() => {\n        r(() => {\n          e.forEach(t => {\n            s(t);\n          });\n        });\n      });\n    };\n\n    return {\n      batch: t => {\n        let s;\n        e++;\n\n        try {\n          s = t();\n        } finally {\n          e--, e || n();\n        }\n\n        return s;\n      },\n      batchCalls: t => function () {\n        for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n          e[_key] = arguments[_key];\n        }\n\n        i(() => {\n          t(...e);\n        });\n      },\n      schedule: i,\n      setNotifyFunction: t => {\n        s = t;\n      },\n      setBatchNotifyFunction: t => {\n        r = t;\n      }\n    };\n  }();\n\n  class k {\n    destroy() {\n      this.clearGcTimeout();\n    }\n\n    scheduleGc() {\n      this.clearGcTimeout(), u(this.cacheTime) && (this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime));\n    }\n\n    updateCacheTime(t) {\n      this.cacheTime = Math.max(this.cacheTime || 0, null != t ? t : a ? 1 / 0 : 3e5);\n    }\n\n    clearGcTimeout() {\n      this.gcTimeout && (clearTimeout(this.gcTimeout), this.gcTimeout = void 0);\n    }\n\n  }\n\n  class L extends k {\n    constructor(t) {\n      super(), this.abortSignalConsumed = !1, this.defaultOptions = t.defaultOptions, this.setOptions(t.options), this.observers = [], this.cache = t.cache, this.logger = t.logger || T, this.queryKey = t.queryKey, this.queryHash = t.queryHash, this.initialState = t.state || function (t) {\n        const e = \"function\" == typeof t.initialData ? t.initialData() : t.initialData,\n              s = void 0 !== t.initialData ? \"function\" == typeof t.initialDataUpdatedAt ? t.initialDataUpdatedAt() : t.initialDataUpdatedAt : 0,\n              r = void 0 !== e;\n        return {\n          data: e,\n          dataUpdateCount: 0,\n          dataUpdatedAt: r ? null != s ? s : Date.now() : 0,\n          error: null,\n          errorUpdateCount: 0,\n          errorUpdatedAt: 0,\n          fetchFailureCount: 0,\n          fetchMeta: null,\n          isInvalidated: !1,\n          status: r ? \"success\" : \"loading\",\n          fetchStatus: \"idle\"\n        };\n      }(this.options), this.state = this.initialState, this.meta = t.meta;\n    }\n\n    setOptions(t) {\n      this.options = { ...this.defaultOptions,\n        ...t\n      }, this.meta = null == t ? void 0 : t.meta, this.updateCacheTime(this.options.cacheTime);\n    }\n\n    optionalRemove() {\n      this.observers.length || \"idle\" !== this.state.fetchStatus || this.cache.remove(this);\n    }\n\n    setData(t, e) {\n      const s = x(this.state.data, t, this.options);\n      return this.dispatch({\n        data: s,\n        type: \"success\",\n        dataUpdatedAt: null == e ? void 0 : e.updatedAt,\n        manual: null == e ? void 0 : e.manual\n      }), s;\n    }\n\n    setState(t, e) {\n      this.dispatch({\n        type: \"setState\",\n        state: t,\n        setStateOptions: e\n      });\n    }\n\n    cancel(t) {\n      var e;\n      const s = this.promise;\n      return null == (e = this.retryer) || e.cancel(t), s ? s.then(o).catch(o) : Promise.resolve();\n    }\n\n    destroy() {\n      super.destroy(), this.cancel({\n        silent: !0\n      });\n    }\n\n    reset() {\n      this.destroy(), this.setState(this.initialState);\n    }\n\n    isActive() {\n      return this.observers.some(t => !1 !== t.options.enabled);\n    }\n\n    isDisabled() {\n      return this.getObserversCount() > 0 && !this.isActive();\n    }\n\n    isStale() {\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(t => t.getCurrentResult().isStale);\n    }\n\n    isStaleByTime() {\n      let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return this.state.isInvalidated || !this.state.dataUpdatedAt || !h(this.state.dataUpdatedAt, t);\n    }\n\n    onFocus() {\n      var t;\n      const e = this.observers.find(t => t.shouldFetchOnWindowFocus());\n      e && e.refetch({\n        cancelRefetch: !1\n      }), null == (t = this.retryer) || t.continue();\n    }\n\n    onOnline() {\n      var t;\n      const e = this.observers.find(t => t.shouldFetchOnReconnect());\n      e && e.refetch({\n        cancelRefetch: !1\n      }), null == (t = this.retryer) || t.continue();\n    }\n\n    addObserver(t) {\n      -1 === this.observers.indexOf(t) && (this.observers.push(t), this.clearGcTimeout(), this.cache.notify({\n        type: \"observerAdded\",\n        query: this,\n        observer: t\n      }));\n    }\n\n    removeObserver(t) {\n      -1 !== this.observers.indexOf(t) && (this.observers = this.observers.filter(e => e !== t), this.observers.length || (this.retryer && (this.abortSignalConsumed ? this.retryer.cancel({\n        revert: !0\n      }) : this.retryer.cancelRetry()), this.scheduleGc()), this.cache.notify({\n        type: \"observerRemoved\",\n        query: this,\n        observer: t\n      }));\n    }\n\n    getObserversCount() {\n      return this.observers.length;\n    }\n\n    invalidate() {\n      this.state.isInvalidated || this.dispatch({\n        type: \"invalidate\"\n      });\n    }\n\n    fetch(t, e) {\n      var s, r;\n      if (\"idle\" !== this.state.fetchStatus) if (this.state.dataUpdatedAt && null != e && e.cancelRefetch) this.cancel({\n        silent: !0\n      });else if (this.promise) {\n        var i;\n        return null == (i = this.retryer) || i.continueRetry(), this.promise;\n      }\n\n      if (t && this.setOptions(t), !this.options.queryFn) {\n        const t = this.observers.find(t => t.options.queryFn);\n        t && this.setOptions(t.options);\n      }\n\n      Array.isArray(this.options.queryKey);\n\n      const n = function () {\n        if (\"function\" == typeof AbortController) return new AbortController();\n      }(),\n            a = {\n        queryKey: this.queryKey,\n        pageParam: void 0,\n        meta: this.meta\n      },\n            o = t => {\n        Object.defineProperty(t, \"signal\", {\n          enumerable: !0,\n          get: () => {\n            if (n) return this.abortSignalConsumed = !0, n.signal;\n          }\n        });\n      };\n\n      o(a);\n      const u = {\n        fetchOptions: e,\n        options: this.options,\n        queryKey: this.queryKey,\n        state: this.state,\n        fetchFn: () => this.options.queryFn ? (this.abortSignalConsumed = !1, this.options.queryFn(a)) : Promise.reject(\"Missing queryFn\"),\n        meta: this.meta\n      };\n      var c;\n      (o(u), null == (s = this.options.behavior) || s.onFetch(u), this.revertState = this.state, \"idle\" === this.state.fetchStatus || this.state.fetchMeta !== (null == (r = u.fetchOptions) ? void 0 : r.meta)) && this.dispatch({\n        type: \"fetch\",\n        meta: null == (c = u.fetchOptions) ? void 0 : c.meta\n      });\n\n      const h = t => {\n        var e, s;\n        (I(t) && t.silent || this.dispatch({\n          type: \"error\",\n          error: t\n        }), I(t)) || null == (e = (s = this.cache.config).onError) || e.call(s, t, this);\n        this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1;\n      };\n\n      return this.retryer = U({\n        fn: u.fetchFn,\n        abort: null == n ? void 0 : n.abort.bind(n),\n        onSuccess: t => {\n          var e, s;\n          void 0 !== t ? (this.setData(t), null == (e = (s = this.cache.config).onSuccess) || e.call(s, t, this), this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1) : h(new Error(\"Query data cannot be undefined\"));\n        },\n        onError: h,\n        onFail: () => {\n          this.dispatch({\n            type: \"failed\"\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: \"pause\"\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: \"continue\"\n          });\n        },\n        retry: u.options.retry,\n        retryDelay: u.options.retryDelay,\n        networkMode: u.options.networkMode\n      }), this.promise = this.retryer.promise, this.promise;\n    }\n\n    dispatch(t) {\n      this.state = (e => {\n        var s, r;\n\n        switch (t.type) {\n          case \"failed\":\n            return { ...e,\n              fetchFailureCount: e.fetchFailureCount + 1\n            };\n\n          case \"pause\":\n            return { ...e,\n              fetchStatus: \"paused\"\n            };\n\n          case \"continue\":\n            return { ...e,\n              fetchStatus: \"fetching\"\n            };\n\n          case \"fetch\":\n            return { ...e,\n              fetchFailureCount: 0,\n              fetchMeta: null != (s = t.meta) ? s : null,\n              fetchStatus: A(this.options.networkMode) ? \"fetching\" : \"paused\",\n              ...(!e.dataUpdatedAt && {\n                error: null,\n                status: \"loading\"\n              })\n            };\n\n          case \"success\":\n            return { ...e,\n              data: t.data,\n              dataUpdateCount: e.dataUpdateCount + 1,\n              dataUpdatedAt: null != (r = t.dataUpdatedAt) ? r : Date.now(),\n              error: null,\n              isInvalidated: !1,\n              status: \"success\",\n              ...(!t.manual && {\n                fetchStatus: \"idle\",\n                fetchFailureCount: 0\n              })\n            };\n\n          case \"error\":\n            const i = t.error;\n            return I(i) && i.revert && this.revertState ? { ...this.revertState\n            } : { ...e,\n              error: i,\n              errorUpdateCount: e.errorUpdateCount + 1,\n              errorUpdatedAt: Date.now(),\n              fetchFailureCount: e.fetchFailureCount + 1,\n              fetchStatus: \"idle\",\n              status: \"error\"\n            };\n\n          case \"invalidate\":\n            return { ...e,\n              isInvalidated: !0\n            };\n\n          case \"setState\":\n            return { ...e,\n              ...t.state\n            };\n        }\n      })(this.state), K.batch(() => {\n        this.observers.forEach(e => {\n          e.onQueryUpdate(t);\n        }), this.cache.notify({\n          query: this,\n          type: \"updated\",\n          action: t\n        });\n      });\n    }\n\n  }\n\n  class j extends n {\n    constructor(t) {\n      super(), this.config = t || {}, this.queries = [], this.queriesMap = {};\n    }\n\n    build(t, e, s) {\n      var r;\n      const i = e.queryKey,\n            n = null != (r = e.queryHash) ? r : m(i, e);\n      let a = this.get(n);\n      return a || (a = new L({\n        cache: this,\n        logger: t.getLogger(),\n        queryKey: i,\n        queryHash: n,\n        options: t.defaultQueryOptions(e),\n        state: s,\n        defaultOptions: t.getQueryDefaults(i),\n        meta: e.meta\n      }), this.add(a)), a;\n    }\n\n    add(t) {\n      this.queriesMap[t.queryHash] || (this.queriesMap[t.queryHash] = t, this.queries.push(t), this.notify({\n        type: \"added\",\n        query: t\n      }));\n    }\n\n    remove(t) {\n      const e = this.queriesMap[t.queryHash];\n      e && (t.destroy(), this.queries = this.queries.filter(e => e !== t), e === t && delete this.queriesMap[t.queryHash], this.notify({\n        type: \"removed\",\n        query: t\n      }));\n    }\n\n    clear() {\n      K.batch(() => {\n        this.queries.forEach(t => {\n          this.remove(t);\n        });\n      });\n    }\n\n    get(t) {\n      return this.queriesMap[t];\n    }\n\n    getAll() {\n      return this.queries;\n    }\n\n    find(t, e) {\n      const [s] = f(t, e);\n      return void 0 === s.exact && (s.exact = !0), this.queries.find(t => y(s, t));\n    }\n\n    findAll(t, e) {\n      const [s] = f(t, e);\n      return Object.keys(s).length > 0 ? this.queries.filter(t => y(s, t)) : this.queries;\n    }\n\n    notify(t) {\n      K.batch(() => {\n        this.listeners.forEach(e => {\n          e(t);\n        });\n      });\n    }\n\n    onFocus() {\n      K.batch(() => {\n        this.queries.forEach(t => {\n          t.onFocus();\n        });\n      });\n    }\n\n    onOnline() {\n      K.batch(() => {\n        this.queries.forEach(t => {\n          t.onOnline();\n        });\n      });\n    }\n\n  }\n\n  class H extends k {\n    constructor(t) {\n      super(), this.options = { ...t.defaultOptions,\n        ...t.options\n      }, this.mutationId = t.mutationId, this.mutationCache = t.mutationCache, this.logger = t.logger || T, this.observers = [], this.state = t.state || N(), this.meta = t.meta, this.updateCacheTime(this.options.cacheTime), this.scheduleGc();\n    }\n\n    setState(t) {\n      this.dispatch({\n        type: \"setState\",\n        state: t\n      });\n    }\n\n    addObserver(t) {\n      -1 === this.observers.indexOf(t) && (this.observers.push(t), this.clearGcTimeout(), this.mutationCache.notify({\n        type: \"observerAdded\",\n        mutation: this,\n        observer: t\n      }));\n    }\n\n    removeObserver(t) {\n      this.observers = this.observers.filter(e => e !== t), this.scheduleGc(), this.mutationCache.notify({\n        type: \"observerRemoved\",\n        mutation: this,\n        observer: t\n      });\n    }\n\n    optionalRemove() {\n      this.observers.length || (\"loading\" === this.state.status ? this.scheduleGc() : this.mutationCache.remove(this));\n    }\n\n    continue() {\n      return this.retryer ? (this.retryer.continue(), this.retryer.promise) : this.execute();\n    }\n\n    async execute() {\n      const t = () => {\n        var t;\n        return this.retryer = U({\n          fn: () => this.options.mutationFn ? this.options.mutationFn(this.state.variables) : Promise.reject(\"No mutationFn found\"),\n          onFail: () => {\n            this.dispatch({\n              type: \"failed\"\n            });\n          },\n          onPause: () => {\n            this.dispatch({\n              type: \"pause\"\n            });\n          },\n          onContinue: () => {\n            this.dispatch({\n              type: \"continue\"\n            });\n          },\n          retry: null != (t = this.options.retry) ? t : 0,\n          retryDelay: this.options.retryDelay,\n          networkMode: this.options.networkMode\n        }), this.retryer.promise;\n      },\n            e = \"loading\" === this.state.status;\n\n      try {\n        var s, r, i, n, a, o;\n\n        if (!e) {\n          var u, c, h, l;\n          this.dispatch({\n            type: \"loading\",\n            variables: this.options.variables\n          }), null == (u = (c = this.mutationCache.config).onMutate) || u.call(c, this.state.variables, this);\n          const t = await (null == (h = (l = this.options).onMutate) ? void 0 : h.call(l, this.state.variables));\n          t !== this.state.context && this.dispatch({\n            type: \"loading\",\n            context: t,\n            variables: this.state.variables\n          });\n        }\n\n        const d = await t();\n        return null == (s = (r = this.mutationCache.config).onSuccess) || s.call(r, d, this.state.variables, this.state.context, this), await (null == (i = (n = this.options).onSuccess) ? void 0 : i.call(n, d, this.state.variables, this.state.context)), await (null == (a = (o = this.options).onSettled) ? void 0 : a.call(o, d, null, this.state.variables, this.state.context)), this.dispatch({\n          type: \"success\",\n          data: d\n        }), d;\n      } catch (t) {\n        try {\n          var d, f, p, y, v, m;\n          throw null == (d = (f = this.mutationCache.config).onError) || d.call(f, t, this.state.variables, this.state.context, this), await (null == (p = (y = this.options).onError) ? void 0 : p.call(y, t, this.state.variables, this.state.context)), await (null == (v = (m = this.options).onSettled) ? void 0 : v.call(m, void 0, t, this.state.variables, this.state.context)), t;\n        } finally {\n          this.dispatch({\n            type: \"error\",\n            error: t\n          });\n        }\n      }\n    }\n\n    dispatch(t) {\n      this.state = (e => {\n        switch (t.type) {\n          case \"failed\":\n            return { ...e,\n              failureCount: e.failureCount + 1\n            };\n\n          case \"pause\":\n            return { ...e,\n              isPaused: !0\n            };\n\n          case \"continue\":\n            return { ...e,\n              isPaused: !1\n            };\n\n          case \"loading\":\n            return { ...e,\n              context: t.context,\n              data: void 0,\n              error: null,\n              isPaused: !A(this.options.networkMode),\n              status: \"loading\",\n              variables: t.variables\n            };\n\n          case \"success\":\n            return { ...e,\n              data: t.data,\n              error: null,\n              status: \"success\",\n              isPaused: !1\n            };\n\n          case \"error\":\n            return { ...e,\n              data: void 0,\n              error: t.error,\n              failureCount: e.failureCount + 1,\n              isPaused: !1,\n              status: \"error\"\n            };\n\n          case \"setState\":\n            return { ...e,\n              ...t.state\n            };\n        }\n      })(this.state), K.batch(() => {\n        this.observers.forEach(e => {\n          e.onMutationUpdate(t);\n        }), this.mutationCache.notify({\n          mutation: this,\n          type: \"updated\",\n          action: t\n        });\n      });\n    }\n\n  }\n\n  function N() {\n    return {\n      context: void 0,\n      data: void 0,\n      error: null,\n      failureCount: 0,\n      isPaused: !1,\n      status: \"idle\",\n      variables: void 0\n    };\n  }\n\n  class B extends n {\n    constructor(t) {\n      super(), this.config = t || {}, this.mutations = [], this.mutationId = 0;\n    }\n\n    build(t, e, s) {\n      const r = new H({\n        mutationCache: this,\n        logger: t.getLogger(),\n        mutationId: ++this.mutationId,\n        options: t.defaultMutationOptions(e),\n        state: s,\n        defaultOptions: e.mutationKey ? t.getMutationDefaults(e.mutationKey) : void 0,\n        meta: e.meta\n      });\n      return this.add(r), r;\n    }\n\n    add(t) {\n      this.mutations.push(t), this.notify({\n        type: \"added\",\n        mutation: t\n      });\n    }\n\n    remove(t) {\n      this.mutations = this.mutations.filter(e => e !== t), this.notify({\n        type: \"removed\",\n        mutation: t\n      });\n    }\n\n    clear() {\n      K.batch(() => {\n        this.mutations.forEach(t => {\n          this.remove(t);\n        });\n      });\n    }\n\n    getAll() {\n      return this.mutations;\n    }\n\n    find(t) {\n      return void 0 === t.exact && (t.exact = !0), this.mutations.find(e => v(t, e));\n    }\n\n    findAll(t) {\n      return this.mutations.filter(e => v(t, e));\n    }\n\n    notify(t) {\n      K.batch(() => {\n        this.listeners.forEach(e => {\n          e(t);\n        });\n      });\n    }\n\n    resumePausedMutations() {\n      const t = this.mutations.filter(t => t.state.isPaused);\n      return K.batch(() => t.reduce((t, e) => t.then(() => e.continue().catch(o)), Promise.resolve()));\n    }\n\n  }\n\n  function G() {\n    return {\n      onFetch: t => {\n        t.fetchFn = () => {\n          var e, s, r, i, n, a;\n          const o = null == (e = t.fetchOptions) || null == (s = e.meta) ? void 0 : s.refetchPage,\n                u = null == (r = t.fetchOptions) || null == (i = r.meta) ? void 0 : i.fetchMore,\n                c = null == u ? void 0 : u.pageParam,\n                h = \"forward\" === (null == u ? void 0 : u.direction),\n                l = \"backward\" === (null == u ? void 0 : u.direction),\n                d = (null == (n = t.state.data) ? void 0 : n.pages) || [],\n                f = (null == (a = t.state.data) ? void 0 : a.pageParams) || [];\n          let p = f,\n              y = !1;\n\n          const v = t.options.queryFn || (() => Promise.reject(\"Missing queryFn\")),\n                m = (t, e, s, r) => (p = r ? [e, ...p] : [...p, e], r ? [s, ...t] : [...t, s]),\n                b = (e, s, r, i) => {\n            if (y) return Promise.reject(\"Cancelled\");\n            if (void 0 === r && !s && e.length) return Promise.resolve(e);\n            const n = {\n              queryKey: t.queryKey,\n              pageParam: r,\n              meta: t.meta\n            };\n            var a;\n            a = n, Object.defineProperty(a, \"signal\", {\n              enumerable: !0,\n              get: () => {\n                var e, s;\n                return null != (e = t.signal) && e.aborted ? y = !0 : null == (s = t.signal) || s.addEventListener(\"abort\", () => {\n                  y = !0;\n                }), t.signal;\n              }\n            });\n            const o = v(n);\n            return Promise.resolve(o).then(t => m(e, r, t, i));\n          };\n\n          let g;\n          if (d.length) {\n            if (h) {\n              const e = void 0 !== c,\n                    s = e ? c : _(t.options, d);\n              g = b(d, e, s);\n            } else if (l) {\n              const e = void 0 !== c,\n                    s = e ? c : W(t.options, d);\n              g = b(d, e, s, !0);\n            } else {\n              p = [];\n              const e = void 0 === t.options.getNextPageParam;\n              g = !o || !d[0] || o(d[0], 0, d) ? b([], e, f[0]) : Promise.resolve(m([], f[0], d[0]));\n\n              for (let s = 1; s < d.length; s++) g = g.then(r => {\n                if (!o || !d[s] || o(d[s], s, d)) {\n                  const i = e ? f[s] : _(t.options, r);\n                  return b(r, e, i);\n                }\n\n                return Promise.resolve(m(r, f[s], d[s]));\n              });\n            }\n          } else g = b([]);\n          return g.then(t => ({\n            pages: t,\n            pageParams: p\n          }));\n        };\n      }\n    };\n  }\n\n  function _(t, e) {\n    return null == t.getNextPageParam ? void 0 : t.getNextPageParam(e[e.length - 1], e);\n  }\n\n  function W(t, e) {\n    return null == t.getPreviousPageParam ? void 0 : t.getPreviousPageParam(e[0], e);\n  }\n\n  function z(t, e) {\n    if (t.getNextPageParam && Array.isArray(e)) {\n      const s = _(t, e);\n\n      return null != s && !1 !== s;\n    }\n  }\n\n  function J(t, e) {\n    if (t.getPreviousPageParam && Array.isArray(e)) {\n      const s = W(t, e);\n      return null != s && !1 !== s;\n    }\n  }\n\n  class V extends n {\n    constructor(t, e) {\n      super(), this.client = t, this.options = e, this.trackedProps = new Set(), this.selectError = null, this.bindMethods(), this.setOptions(e);\n    }\n\n    bindMethods() {\n      this.remove = this.remove.bind(this), this.refetch = this.refetch.bind(this);\n    }\n\n    onSubscribe() {\n      1 === this.listeners.length && (this.currentQuery.addObserver(this), X(this.currentQuery, this.options) && this.executeFetch(), this.updateTimers());\n    }\n\n    onUnsubscribe() {\n      this.listeners.length || this.destroy();\n    }\n\n    shouldFetchOnReconnect() {\n      return Y(this.currentQuery, this.options, this.options.refetchOnReconnect);\n    }\n\n    shouldFetchOnWindowFocus() {\n      return Y(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n    }\n\n    destroy() {\n      this.listeners = [], this.clearStaleTimeout(), this.clearRefetchInterval(), this.currentQuery.removeObserver(this);\n    }\n\n    setOptions(t, e) {\n      const s = this.options,\n            r = this.currentQuery;\n      if (this.options = this.client.defaultQueryOptions(t), void 0 !== this.options.enabled && \"boolean\" != typeof this.options.enabled) throw new Error(\"Expected enabled to be a boolean\");\n      this.options.queryKey || (this.options.queryKey = s.queryKey), this.updateQuery();\n      const i = this.hasListeners();\n      i && Z(this.currentQuery, r, this.options, s) && this.executeFetch(), this.updateResult(e), !i || this.currentQuery === r && this.options.enabled === s.enabled && this.options.staleTime === s.staleTime || this.updateStaleTimeout();\n      const n = this.computeRefetchInterval();\n      !i || this.currentQuery === r && this.options.enabled === s.enabled && n === this.currentRefetchInterval || this.updateRefetchInterval(n);\n    }\n\n    getOptimisticResult(t) {\n      const e = this.client.getQueryCache().build(this.client, t);\n      return this.createResult(e, t);\n    }\n\n    getCurrentResult() {\n      return this.currentResult;\n    }\n\n    trackResult(t) {\n      const e = {};\n      return Object.keys(t).forEach(s => {\n        Object.defineProperty(e, s, {\n          configurable: !1,\n          enumerable: !0,\n          get: () => (this.trackedProps.add(s), t[s])\n        });\n      }), e;\n    }\n\n    getCurrentQuery() {\n      return this.currentQuery;\n    }\n\n    remove() {\n      this.client.getQueryCache().remove(this.currentQuery);\n    }\n\n    refetch() {\n      let {\n        refetchPage: t,\n        ...e\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.fetch({ ...e,\n        meta: {\n          refetchPage: t\n        }\n      });\n    }\n\n    fetchOptimistic(t) {\n      const e = this.client.defaultQueryOptions(t),\n            s = this.client.getQueryCache().build(this.client, e);\n      return s.isFetchingOptimistic = !0, s.fetch().then(() => this.createResult(s, e));\n    }\n\n    fetch(t) {\n      var e;\n      return this.executeFetch({ ...t,\n        cancelRefetch: null == (e = t.cancelRefetch) || e\n      }).then(() => (this.updateResult(), this.currentResult));\n    }\n\n    executeFetch(t) {\n      this.updateQuery();\n      let e = this.currentQuery.fetch(this.options, t);\n      return null != t && t.throwOnError || (e = e.catch(o)), e;\n    }\n\n    updateStaleTimeout() {\n      if (this.clearStaleTimeout(), a || this.currentResult.isStale || !u(this.options.staleTime)) return;\n      const t = h(this.currentResult.dataUpdatedAt, this.options.staleTime) + 1;\n      this.staleTimeoutId = setTimeout(() => {\n        this.currentResult.isStale || this.updateResult();\n      }, t);\n    }\n\n    computeRefetchInterval() {\n      var t;\n      return \"function\" == typeof this.options.refetchInterval ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : null != (t = this.options.refetchInterval) && t;\n    }\n\n    updateRefetchInterval(t) {\n      this.clearRefetchInterval(), this.currentRefetchInterval = t, !a && !1 !== this.options.enabled && u(this.currentRefetchInterval) && 0 !== this.currentRefetchInterval && (this.refetchIntervalId = setInterval(() => {\n        (this.options.refetchIntervalInBackground || M.isFocused()) && this.executeFetch();\n      }, this.currentRefetchInterval));\n    }\n\n    updateTimers() {\n      this.updateStaleTimeout(), this.updateRefetchInterval(this.computeRefetchInterval());\n    }\n\n    clearStaleTimeout() {\n      this.staleTimeoutId && (clearTimeout(this.staleTimeoutId), this.staleTimeoutId = void 0);\n    }\n\n    clearRefetchInterval() {\n      this.refetchIntervalId && (clearInterval(this.refetchIntervalId), this.refetchIntervalId = void 0);\n    }\n\n    createResult(t, e) {\n      const s = this.currentQuery,\n            r = this.options,\n            i = this.currentResult,\n            n = this.currentResultState,\n            a = this.currentResultOptions,\n            o = t !== s,\n            u = o ? t.state : this.currentQueryInitialState,\n            c = o ? this.currentResult : this.previousQueryResult,\n            {\n        state: h\n      } = t;\n      let l,\n          {\n        dataUpdatedAt: d,\n        error: f,\n        errorUpdatedAt: p,\n        fetchStatus: y,\n        status: v\n      } = h,\n          m = !1,\n          b = !1;\n\n      if (e._optimisticResults) {\n        const i = this.hasListeners(),\n              n = !i && X(t, e),\n              a = i && Z(t, s, e, r);\n        (n || a) && (y = A(t.options.networkMode) ? \"fetching\" : \"paused\", d || (v = \"loading\")), \"isRestoring\" === e._optimisticResults && (y = \"idle\");\n      }\n\n      if (e.keepPreviousData && !h.dataUpdateCount && null != c && c.isSuccess && \"error\" !== v) l = c.data, d = c.dataUpdatedAt, v = c.status, m = !0;else if (e.select && void 0 !== h.data) {\n        if (i && h.data === (null == n ? void 0 : n.data) && e.select === this.selectFn) l = this.selectResult;else try {\n          this.selectFn = e.select, l = e.select(h.data), l = x(null == i ? void 0 : i.data, l, e), this.selectResult = l, this.selectError = null;\n        } catch (t) {\n          this.selectError = t;\n        }\n      } else l = h.data;\n\n      if (void 0 !== e.placeholderData && void 0 === l && \"loading\" === v) {\n        let t;\n        if (null != i && i.isPlaceholderData && e.placeholderData === (null == a ? void 0 : a.placeholderData)) t = i.data;else if (t = \"function\" == typeof e.placeholderData ? e.placeholderData() : e.placeholderData, e.select && void 0 !== t) try {\n          t = e.select(t), t = x(null == i ? void 0 : i.data, t, e), this.selectError = null;\n        } catch (t) {\n          this.selectError = t;\n        }\n        void 0 !== t && (v = \"success\", l = t, b = !0);\n      }\n\n      this.selectError && (f = this.selectError, l = this.selectResult, p = Date.now(), v = \"error\");\n      const g = \"fetching\" === y;\n      return {\n        status: v,\n        fetchStatus: y,\n        isLoading: \"loading\" === v,\n        isSuccess: \"success\" === v,\n        isError: \"error\" === v,\n        data: l,\n        dataUpdatedAt: d,\n        error: f,\n        errorUpdatedAt: p,\n        failureCount: h.fetchFailureCount,\n        errorUpdateCount: h.errorUpdateCount,\n        isFetched: h.dataUpdateCount > 0 || h.errorUpdateCount > 0,\n        isFetchedAfterMount: h.dataUpdateCount > u.dataUpdateCount || h.errorUpdateCount > u.errorUpdateCount,\n        isFetching: g,\n        isRefetching: g && \"loading\" !== v,\n        isLoadingError: \"error\" === v && 0 === h.dataUpdatedAt,\n        isPaused: \"paused\" === y,\n        isPlaceholderData: b,\n        isPreviousData: m,\n        isRefetchError: \"error\" === v && 0 !== h.dataUpdatedAt,\n        isStale: $(t, e),\n        refetch: this.refetch,\n        remove: this.remove\n      };\n    }\n\n    updateResult(t) {\n      const e = this.currentResult,\n            s = this.createResult(this.currentQuery, this.options);\n      if (this.currentResultState = this.currentQuery.state, this.currentResultOptions = this.options, function (t, e) {\n        if (t && !e || e && !t) return !1;\n\n        for (const s in t) if (t[s] !== e[s]) return !1;\n\n        return !0;\n      }(s, e)) return;\n      this.currentResult = s;\n      const r = {\n        cache: !0\n      };\n      !1 !== (null == t ? void 0 : t.listeners) && (() => {\n        if (!e) return !0;\n        const {\n          notifyOnChangeProps: t\n        } = this.options;\n        if (\"all\" === t || !t && !this.trackedProps.size) return !0;\n        const s = new Set(null != t ? t : this.trackedProps);\n        return this.options.useErrorBoundary && s.add(\"error\"), Object.keys(this.currentResult).some(t => {\n          const r = t;\n          return this.currentResult[r] !== e[r] && s.has(r);\n        });\n      })() && (r.listeners = !0), this.notify({ ...r,\n        ...t\n      });\n    }\n\n    updateQuery() {\n      const t = this.client.getQueryCache().build(this.client, this.options);\n      if (t === this.currentQuery) return;\n      const e = this.currentQuery;\n      this.currentQuery = t, this.currentQueryInitialState = t.state, this.previousQueryResult = this.currentResult, this.hasListeners() && (null == e || e.removeObserver(this), t.addObserver(this));\n    }\n\n    onQueryUpdate(t) {\n      const e = {};\n      \"success\" === t.type ? e.onSuccess = !t.manual : \"error\" !== t.type || I(t.error) || (e.onError = !0), this.updateResult(e), this.hasListeners() && this.updateTimers();\n    }\n\n    notify(t) {\n      K.batch(() => {\n        var e, s, r, i;\n        if (t.onSuccess) null == (e = (s = this.options).onSuccess) || e.call(s, this.currentResult.data), null == (r = (i = this.options).onSettled) || r.call(i, this.currentResult.data, null);else if (t.onError) {\n          var n, a, o, u;\n          null == (n = (a = this.options).onError) || n.call(a, this.currentResult.error), null == (o = (u = this.options).onSettled) || o.call(u, void 0, this.currentResult.error);\n        }\n        t.listeners && this.listeners.forEach(t => {\n          t(this.currentResult);\n        }), t.cache && this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: \"observerResultsUpdated\"\n        });\n      });\n    }\n\n  }\n\n  function X(t, e) {\n    return function (t, e) {\n      return !(!1 === e.enabled || t.state.dataUpdatedAt || \"error\" === t.state.status && !1 === e.retryOnMount);\n    }(t, e) || t.state.dataUpdatedAt > 0 && Y(t, e, e.refetchOnMount);\n  }\n\n  function Y(t, e, s) {\n    if (!1 !== e.enabled) {\n      const r = \"function\" == typeof s ? s(t) : s;\n      return \"always\" === r || !1 !== r && $(t, e);\n    }\n\n    return !1;\n  }\n\n  function Z(t, e, s, r) {\n    return !1 !== s.enabled && (t !== e || !1 === r.enabled) && (!s.suspense || \"error\" !== t.state.status) && $(t, s);\n  }\n\n  function $(t, e) {\n    return t.isStaleByTime(e.staleTime);\n  }\n\n  class tt extends n {\n    constructor(t, e) {\n      super(), this.client = t, this.queries = [], this.result = [], this.observers = [], this.observersMap = {}, e && this.setQueries(e);\n    }\n\n    onSubscribe() {\n      1 === this.listeners.length && this.observers.forEach(t => {\n        t.subscribe(e => {\n          this.onUpdate(t, e);\n        });\n      });\n    }\n\n    onUnsubscribe() {\n      this.listeners.length || this.destroy();\n    }\n\n    destroy() {\n      this.listeners = [], this.observers.forEach(t => {\n        t.destroy();\n      });\n    }\n\n    setQueries(t, e) {\n      this.queries = t, K.batch(() => {\n        const t = this.observers,\n              s = this.findMatchingObservers(this.queries);\n        s.forEach(t => t.observer.setOptions(t.defaultedQueryOptions, e));\n        const r = s.map(t => t.observer),\n              i = Object.fromEntries(r.map(t => [t.options.queryHash, t])),\n              n = r.map(t => t.getCurrentResult()),\n              a = r.some((e, s) => e !== t[s]);\n        (t.length !== r.length || a) && (this.observers = r, this.observersMap = i, this.result = n, this.hasListeners() && (c(t, r).forEach(t => {\n          t.destroy();\n        }), c(r, t).forEach(t => {\n          t.subscribe(e => {\n            this.onUpdate(t, e);\n          });\n        }), this.notify()));\n      });\n    }\n\n    getCurrentResult() {\n      return this.result;\n    }\n\n    getOptimisticResult(t) {\n      return this.findMatchingObservers(t).map(t => t.observer.getOptimisticResult(t.defaultedQueryOptions));\n    }\n\n    findMatchingObservers(t) {\n      const e = this.observers,\n            s = t.map(t => this.client.defaultQueryOptions(t)),\n            r = s.flatMap(t => {\n        const s = e.find(e => e.options.queryHash === t.queryHash);\n        return null != s ? [{\n          defaultedQueryOptions: t,\n          observer: s\n        }] : [];\n      }),\n            i = r.map(t => t.defaultedQueryOptions.queryHash),\n            n = s.filter(t => !i.includes(t.queryHash)),\n            a = e.filter(t => !r.some(e => e.observer === t)),\n            o = t => {\n        const e = this.client.defaultQueryOptions(t),\n              s = this.observersMap[e.queryHash];\n        return null != s ? s : new V(this.client, e);\n      },\n            u = n.map((t, e) => {\n        if (t.keepPreviousData) {\n          const s = a[e];\n          if (void 0 !== s) return {\n            defaultedQueryOptions: t,\n            observer: s\n          };\n        }\n\n        return {\n          defaultedQueryOptions: t,\n          observer: o(t)\n        };\n      });\n\n      return r.concat(u).sort((t, e) => s.indexOf(t.defaultedQueryOptions) - s.indexOf(e.defaultedQueryOptions));\n    }\n\n    onUpdate(t, e) {\n      const s = this.observers.indexOf(t);\n      -1 !== s && (this.result = function (t, e, s) {\n        const r = t.slice(0);\n        return r[e] = s, r;\n      }(this.result, s, e), this.notify());\n    }\n\n    notify() {\n      K.batch(() => {\n        this.listeners.forEach(t => {\n          t(this.result);\n        });\n      });\n    }\n\n  }\n\n  class et extends V {\n    constructor(t, e) {\n      super(t, e);\n    }\n\n    bindMethods() {\n      super.bindMethods(), this.fetchNextPage = this.fetchNextPage.bind(this), this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n    }\n\n    setOptions(t, e) {\n      super.setOptions({ ...t,\n        behavior: G()\n      }, e);\n    }\n\n    getOptimisticResult(t) {\n      return t.behavior = G(), super.getOptimisticResult(t);\n    }\n\n    fetchNextPage() {\n      let {\n        pageParam: t,\n        ...e\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.fetch({ ...e,\n        meta: {\n          fetchMore: {\n            direction: \"forward\",\n            pageParam: t\n          }\n        }\n      });\n    }\n\n    fetchPreviousPage() {\n      let {\n        pageParam: t,\n        ...e\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.fetch({ ...e,\n        meta: {\n          fetchMore: {\n            direction: \"backward\",\n            pageParam: t\n          }\n        }\n      });\n    }\n\n    createResult(t, e) {\n      var s, r, i, n, a, o;\n      const {\n        state: u\n      } = t;\n      return { ...super.createResult(t, e),\n        fetchNextPage: this.fetchNextPage,\n        fetchPreviousPage: this.fetchPreviousPage,\n        hasNextPage: z(e, null == (s = u.data) ? void 0 : s.pages),\n        hasPreviousPage: J(e, null == (r = u.data) ? void 0 : r.pages),\n        isFetchingNextPage: \"fetching\" === u.fetchStatus && \"forward\" === (null == (i = u.fetchMeta) || null == (n = i.fetchMore) ? void 0 : n.direction),\n        isFetchingPreviousPage: \"fetching\" === u.fetchStatus && \"backward\" === (null == (a = u.fetchMeta) || null == (o = a.fetchMore) ? void 0 : o.direction)\n      };\n    }\n\n  }\n\n  class st extends n {\n    constructor(t, e) {\n      super(), this.client = t, this.setOptions(e), this.bindMethods(), this.updateResult();\n    }\n\n    bindMethods() {\n      this.mutate = this.mutate.bind(this), this.reset = this.reset.bind(this);\n    }\n\n    setOptions(t) {\n      this.options = this.client.defaultMutationOptions(t);\n    }\n\n    onUnsubscribe() {\n      var t;\n      this.listeners.length || null == (t = this.currentMutation) || t.removeObserver(this);\n    }\n\n    onMutationUpdate(t) {\n      this.updateResult();\n      const e = {\n        listeners: !0\n      };\n      \"success\" === t.type ? e.onSuccess = !0 : \"error\" === t.type && (e.onError = !0), this.notify(e);\n    }\n\n    getCurrentResult() {\n      return this.currentResult;\n    }\n\n    reset() {\n      this.currentMutation = void 0, this.updateResult(), this.notify({\n        listeners: !0\n      });\n    }\n\n    mutate(t, e) {\n      return this.mutateOptions = e, this.currentMutation && this.currentMutation.removeObserver(this), this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n        variables: void 0 !== t ? t : this.options.variables\n      }), this.currentMutation.addObserver(this), this.currentMutation.execute();\n    }\n\n    updateResult() {\n      const t = this.currentMutation ? this.currentMutation.state : {\n        context: void 0,\n        data: void 0,\n        error: null,\n        failureCount: 0,\n        isPaused: !1,\n        status: \"idle\",\n        variables: void 0\n      },\n            e = { ...t,\n        isLoading: \"loading\" === t.status,\n        isSuccess: \"success\" === t.status,\n        isError: \"error\" === t.status,\n        isIdle: \"idle\" === t.status,\n        mutate: this.mutate,\n        reset: this.reset\n      };\n      this.currentResult = e;\n    }\n\n    notify(t) {\n      K.batch(() => {\n        var e, s, r, i;\n        if (this.mutateOptions) if (t.onSuccess) null == (e = (s = this.mutateOptions).onSuccess) || e.call(s, this.currentResult.data, this.currentResult.variables, this.currentResult.context), null == (r = (i = this.mutateOptions).onSettled) || r.call(i, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);else if (t.onError) {\n          var n, a, o, u;\n          null == (n = (a = this.mutateOptions).onError) || n.call(a, this.currentResult.error, this.currentResult.variables, this.currentResult.context), null == (o = (u = this.mutateOptions).onSettled) || o.call(u, void 0, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n        t.listeners && this.listeners.forEach(t => {\n          t(this.currentResult);\n        });\n      });\n    }\n\n  }\n\n  function rt(t) {\n    return t.state.isPaused;\n  }\n\n  function it(t) {\n    return \"success\" === t.state.status;\n  }\n\n  function nt(t, e, s) {\n    if (\"object\" != typeof e || null === e) return;\n    const r = t.getMutationCache(),\n          i = t.getQueryCache(),\n          n = e.mutations || [],\n          a = e.queries || [];\n    n.forEach(e => {\n      var i;\n      r.build(t, { ...(null == s || null == (i = s.defaultOptions) ? void 0 : i.mutations),\n        mutationKey: e.mutationKey\n      }, e.state);\n    }), a.forEach(e => {\n      var r;\n      const n = i.get(e.queryHash);\n      n ? n.state.dataUpdatedAt < e.state.dataUpdatedAt && n.setState(e.state) : i.build(t, { ...(null == s || null == (r = s.defaultOptions) ? void 0 : r.queries),\n        queryKey: e.queryKey,\n        queryHash: e.queryHash\n      }, e.state);\n    });\n  }\n\n  const at = i.createContext(void 0),\n        ot = i.createContext(!1);\n\n  function ut(t, e) {\n    return t || (e && \"undefined\" != typeof window ? (window.ReactQueryClientContext || (window.ReactQueryClientContext = at), window.ReactQueryClientContext) : at);\n  }\n\n  const ct = function () {\n    let {\n      context: t\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const e = i.useContext(ut(t, i.useContext(ot)));\n    if (!e) throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n    return e;\n  },\n        ht = i.createContext(!1),\n        lt = () => i.useContext(ht),\n        dt = ht.Provider;\n\n  function ft() {\n    let t = !1;\n    return {\n      clearReset: () => {\n        t = !1;\n      },\n      reset: () => {\n        t = !0;\n      },\n      isReset: () => t\n    };\n  }\n\n  const pt = i.createContext(ft()),\n        yt = () => i.useContext(pt);\n\n  function vt(t, e) {\n    return \"function\" == typeof t ? t(...e) : !!t;\n  }\n\n  function mt(t, e) {\n    const r = ct({\n      context: t.context\n    }),\n          n = lt(),\n          a = yt(),\n          o = r.defaultQueryOptions(t);\n    o._optimisticResults = n ? \"isRestoring\" : \"optimistic\", o.onError && (o.onError = K.batchCalls(o.onError)), o.onSuccess && (o.onSuccess = K.batchCalls(o.onSuccess)), o.onSettled && (o.onSettled = K.batchCalls(o.onSettled)), o.suspense && \"number\" != typeof o.staleTime && (o.staleTime = 1e3), (o.suspense || o.useErrorBoundary) && (a.isReset() || (o.retryOnMount = !1));\n    const [u] = i.useState(() => new e(r, o)),\n          c = u.getOptimisticResult(o);\n    if (s.useSyncExternalStore(i.useCallback(t => n ? () => {} : u.subscribe(K.batchCalls(t)), [u, n]), () => u.getCurrentResult(), () => u.getCurrentResult()), i.useEffect(() => {\n      a.clearReset();\n    }, [a]), i.useEffect(() => {\n      u.setOptions(o, {\n        listeners: !1\n      });\n    }, [o, u]), o.suspense && c.isLoading && c.isFetching && !n) throw u.fetchOptimistic(o).then(_ref => {\n      let {\n        data: t\n      } = _ref;\n      null == o.onSuccess || o.onSuccess(t), null == o.onSettled || o.onSettled(t, null);\n    }).catch(t => {\n      a.clearReset(), null == o.onError || o.onError(t), null == o.onSettled || o.onSettled(void 0, t);\n    });\n    if (c.isError && !a.isReset() && !c.isFetching && vt(o.useErrorBoundary, [c.error, u.getCurrentQuery()])) throw c.error;\n    return o.notifyOnChangeProps ? c : u.trackResult(c);\n  }\n\n  function bt(t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const s = ct({\n      context: e.context\n    }),\n          r = i.useRef(e);\n    r.current = e, i.useMemo(() => {\n      t && nt(s, t, r.current);\n    }, [s, t]);\n  }\n\n  function gt() {}\n\n  t.CancelledError = D, t.Hydrate = _ref2 => {\n    let {\n      children: t,\n      options: e,\n      state: s\n    } = _ref2;\n    return bt(s, e), t;\n  }, t.InfiniteQueryObserver = et, t.IsRestoringProvider = dt, t.MutationCache = B, t.MutationObserver = st, t.QueriesObserver = tt, t.QueryCache = j, t.QueryClient = class {\n    constructor() {\n      let t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.queryCache = t.queryCache || new j(), this.mutationCache = t.mutationCache || new B(), this.logger = t.logger || T, this.defaultOptions = t.defaultOptions || {}, this.queryDefaults = [], this.mutationDefaults = [];\n    }\n\n    mount() {\n      this.unsubscribeFocus = M.subscribe(() => {\n        M.isFocused() && (this.resumePausedMutations(), this.queryCache.onFocus());\n      }), this.unsubscribeOnline = w.subscribe(() => {\n        w.isOnline() && (this.resumePausedMutations(), this.queryCache.onOnline());\n      });\n    }\n\n    unmount() {\n      var t, e;\n      null == (t = this.unsubscribeFocus) || t.call(this), null == (e = this.unsubscribeOnline) || e.call(this);\n    }\n\n    isFetching(t, e) {\n      const [s] = f(t, e);\n      return s.fetchStatus = \"fetching\", this.queryCache.findAll(s).length;\n    }\n\n    isMutating(t) {\n      return this.mutationCache.findAll({ ...t,\n        fetching: !0\n      }).length;\n    }\n\n    getQueryData(t, e) {\n      var s;\n      return null == (s = this.queryCache.find(t, e)) ? void 0 : s.state.data;\n    }\n\n    getQueriesData(t) {\n      return this.getQueryCache().findAll(t).map(_ref3 => {\n        let {\n          queryKey: t,\n          state: e\n        } = _ref3;\n        return [t, e.data];\n      });\n    }\n\n    setQueryData(t, e, s) {\n      const r = this.queryCache.find(t),\n            i = function (t, e) {\n        return \"function\" == typeof t ? t(e) : t;\n      }(e, null == r ? void 0 : r.state.data);\n\n      if (void 0 === i) return;\n      const n = l(t),\n            a = this.defaultQueryOptions(n);\n      return this.queryCache.build(this, a).setData(i, { ...s,\n        manual: !0\n      });\n    }\n\n    setQueriesData(t, e, s) {\n      return K.batch(() => this.getQueryCache().findAll(t).map(_ref4 => {\n        let {\n          queryKey: t\n        } = _ref4;\n        return [t, this.setQueryData(t, e, s)];\n      }));\n    }\n\n    getQueryState(t, e) {\n      var s;\n      return null == (s = this.queryCache.find(t, e)) ? void 0 : s.state;\n    }\n\n    removeQueries(t, e) {\n      const [s] = f(t, e),\n            r = this.queryCache;\n      K.batch(() => {\n        r.findAll(s).forEach(t => {\n          r.remove(t);\n        });\n      });\n    }\n\n    resetQueries(t, e, s) {\n      const [r, i] = f(t, e, s),\n            n = this.queryCache,\n            a = {\n        type: \"active\",\n        ...r\n      };\n      return K.batch(() => (n.findAll(r).forEach(t => {\n        t.reset();\n      }), this.refetchQueries(a, i)));\n    }\n\n    cancelQueries(t, e, s) {\n      const [r, i = {}] = f(t, e, s);\n      void 0 === i.revert && (i.revert = !0);\n      const n = K.batch(() => this.queryCache.findAll(r).map(t => t.cancel(i)));\n      return Promise.all(n).then(o).catch(o);\n    }\n\n    invalidateQueries(t, e, s) {\n      const [r, i] = f(t, e, s);\n      return K.batch(() => {\n        var t, e;\n        if (this.queryCache.findAll(r).forEach(t => {\n          t.invalidate();\n        }), \"none\" === r.refetchType) return Promise.resolve();\n        const s = { ...r,\n          type: null != (t = null != (e = r.refetchType) ? e : r.type) ? t : \"active\"\n        };\n        return this.refetchQueries(s, i);\n      });\n    }\n\n    refetchQueries(t, e, s) {\n      const [r, i] = f(t, e, s),\n            n = K.batch(() => this.queryCache.findAll(r).filter(t => !t.isDisabled()).map(t => {\n        var e;\n        return t.fetch(void 0, { ...i,\n          cancelRefetch: null == (e = null == i ? void 0 : i.cancelRefetch) || e,\n          meta: {\n            refetchPage: r.refetchPage\n          }\n        });\n      }));\n      let a = Promise.all(n).then(o);\n      return null != i && i.throwOnError || (a = a.catch(o)), a;\n    }\n\n    fetchQuery(t, e, s) {\n      const r = l(t, e, s),\n            i = this.defaultQueryOptions(r);\n      void 0 === i.retry && (i.retry = !1);\n      const n = this.queryCache.build(this, i);\n      return n.isStaleByTime(i.staleTime) ? n.fetch(i) : Promise.resolve(n.state.data);\n    }\n\n    prefetchQuery(t, e, s) {\n      return this.fetchQuery(t, e, s).then(o).catch(o);\n    }\n\n    fetchInfiniteQuery(t, e, s) {\n      const r = l(t, e, s);\n      return r.behavior = G(), this.fetchQuery(r);\n    }\n\n    prefetchInfiniteQuery(t, e, s) {\n      return this.fetchInfiniteQuery(t, e, s).then(o).catch(o);\n    }\n\n    resumePausedMutations() {\n      return this.mutationCache.resumePausedMutations();\n    }\n\n    getQueryCache() {\n      return this.queryCache;\n    }\n\n    getMutationCache() {\n      return this.mutationCache;\n    }\n\n    getLogger() {\n      return this.logger;\n    }\n\n    getDefaultOptions() {\n      return this.defaultOptions;\n    }\n\n    setDefaultOptions(t) {\n      this.defaultOptions = t;\n    }\n\n    setQueryDefaults(t, e) {\n      const s = this.queryDefaults.find(e => b(t) === b(e.queryKey));\n      s ? s.defaultOptions = e : this.queryDefaults.push({\n        queryKey: t,\n        defaultOptions: e\n      });\n    }\n\n    getQueryDefaults(t) {\n      if (!t) return;\n      const e = this.queryDefaults.find(e => g(t, e.queryKey));\n      return null == e ? void 0 : e.defaultOptions;\n    }\n\n    setMutationDefaults(t, e) {\n      const s = this.mutationDefaults.find(e => b(t) === b(e.mutationKey));\n      s ? s.defaultOptions = e : this.mutationDefaults.push({\n        mutationKey: t,\n        defaultOptions: e\n      });\n    }\n\n    getMutationDefaults(t) {\n      if (!t) return;\n      const e = this.mutationDefaults.find(e => g(t, e.mutationKey));\n      return null == e ? void 0 : e.defaultOptions;\n    }\n\n    defaultQueryOptions(t) {\n      if (null != t && t._defaulted) return t;\n      const e = { ...this.defaultOptions.queries,\n        ...this.getQueryDefaults(null == t ? void 0 : t.queryKey),\n        ...t,\n        _defaulted: !0\n      };\n      return !e.queryHash && e.queryKey && (e.queryHash = m(e.queryKey, e)), void 0 === e.refetchOnReconnect && (e.refetchOnReconnect = \"always\" !== e.networkMode), void 0 === e.useErrorBoundary && (e.useErrorBoundary = !!e.suspense), e;\n    }\n\n    defaultMutationOptions(t) {\n      return null != t && t._defaulted ? t : { ...this.defaultOptions.mutations,\n        ...this.getMutationDefaults(null == t ? void 0 : t.mutationKey),\n        ...t,\n        _defaulted: !0\n      };\n    }\n\n    clear() {\n      this.queryCache.clear(), this.mutationCache.clear();\n    }\n\n  }, t.QueryClientProvider = _ref5 => {\n    let {\n      client: t,\n      children: e,\n      context: s,\n      contextSharing: r = !1\n    } = _ref5;\n    i.useEffect(() => (t.mount(), () => {\n      t.unmount();\n    }), [t]);\n    const n = ut(s, r);\n    return i.createElement(ot.Provider, {\n      value: !s && r\n    }, i.createElement(n.Provider, {\n      value: t\n    }, e));\n  }, t.QueryErrorResetBoundary = _ref6 => {\n    let {\n      children: t\n    } = _ref6;\n    const [e] = i.useState(() => ft());\n    return i.createElement(pt.Provider, {\n      value: e\n    }, \"function\" == typeof t ? t(e) : t);\n  }, t.QueryObserver = V, t.defaultContext = at, t.dehydrate = function (t) {\n    let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const s = [],\n          r = [];\n\n    if (!1 !== e.dehydrateMutations) {\n      const r = e.shouldDehydrateMutation || rt;\n      t.getMutationCache().getAll().forEach(t => {\n        r(t) && s.push(function (t) {\n          return {\n            mutationKey: t.options.mutationKey,\n            state: t.state\n          };\n        }(t));\n      });\n    }\n\n    if (!1 !== e.dehydrateQueries) {\n      const s = e.shouldDehydrateQuery || it;\n      t.getQueryCache().getAll().forEach(t => {\n        s(t) && r.push(function (t) {\n          return {\n            state: t.state,\n            queryKey: t.queryKey,\n            queryHash: t.queryHash\n          };\n        }(t));\n      });\n    }\n\n    return {\n      mutations: s,\n      queries: r\n    };\n  }, t.focusManager = M, t.hashQueryKey = b, t.hydrate = nt, t.isCancelledError = I, t.isError = function (t) {\n    return t instanceof Error;\n  }, t.notifyManager = K, t.onlineManager = w, t.parseFilterArgs = f, t.parseMutationArgs = d, t.parseMutationFilterArgs = p, t.parseQueryArgs = l, t.useHydrate = bt, t.useInfiniteQuery = function (t, e, s) {\n    return mt(l(t, e, s), et);\n  }, t.useIsFetching = function (t, e, r) {\n    const [n, a = {}] = f(t, e, r),\n          o = ct({\n      context: a.context\n    }),\n          u = o.getQueryCache();\n    return s.useSyncExternalStore(i.useCallback(t => u.subscribe(K.batchCalls(t)), [u]), () => o.isFetching(n), () => o.isFetching(n));\n  }, t.useIsMutating = function (t, e, r) {\n    const [n, a = {}] = p(t, e, r),\n          o = ct({\n      context: a.context\n    }),\n          u = o.getMutationCache();\n    return s.useSyncExternalStore(i.useCallback(t => u.subscribe(K.batchCalls(t)), [u]), () => o.isMutating(n), () => o.isMutating(n));\n  }, t.useIsRestoring = lt, t.useMutation = function (t, e, r) {\n    const n = d(t, e, r),\n          a = ct({\n      context: n.context\n    }),\n          [o] = i.useState(() => new st(a, n));\n    i.useEffect(() => {\n      o.setOptions(n);\n    }, [o, n]);\n    const u = s.useSyncExternalStore(i.useCallback(t => o.subscribe(K.batchCalls(t)), [o]), () => o.getCurrentResult(), () => o.getCurrentResult()),\n          c = i.useCallback((t, e) => {\n      o.mutate(t, e).catch(gt);\n    }, [o]);\n    if (u.error && vt(o.options.useErrorBoundary, [u.error])) throw u.error;\n    return { ...u,\n      mutate: c,\n      mutateAsync: u.mutate\n    };\n  }, t.useQueries = function (_ref7) {\n    let {\n      queries: t,\n      context: e\n    } = _ref7;\n    const r = ct({\n      context: e\n    }),\n          n = lt(),\n          a = i.useMemo(() => t.map(t => {\n      const e = r.defaultQueryOptions(t);\n      return e._optimisticResults = n ? \"isRestoring\" : \"optimistic\", e;\n    }), [t, r, n]),\n          [o] = i.useState(() => new tt(r, a)),\n          u = o.getOptimisticResult(a);\n    return s.useSyncExternalStore(i.useCallback(t => n ? () => {} : o.subscribe(K.batchCalls(t)), [o, n]), () => o.getCurrentResult(), () => o.getCurrentResult()), i.useEffect(() => {\n      o.setQueries(a, {\n        listeners: !1\n      });\n    }, [a, o]), u;\n  }, t.useQuery = function (t, e, s) {\n    return mt(l(t, e, s), V);\n  }, t.useQueryClient = ct, t.useQueryErrorResetBoundary = yt, Object.defineProperty(t, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"mappings":"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","names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","initialDataUpdatedAt","hasData","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchMeta","isInvalidated","getDefaultState$1","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","notifyManager","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","getDefaultState","execute","async","executeMutation","_this$options$retry","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","getQueryCache","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","shallowEqualObjects","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$data","_state$data2","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","MutationObserver","mutate","_this$currentMutation","currentMutation","mutateOptions","getMutationCache","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","hydrate","dehydratedState","queryCache","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","IsRestoringContext","useIsRestoring","IsRestoringProvider","Provider","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","_useErrorBoundary","params","useBaseQuery","Observer","isRestoring","errorResetBoundary","useState","useSyncExternalStore","useCallback","onStoreChange","useEffect","useHydrate","optionsRef","useRef","current","useMemo","children","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","parsedOptions","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","Context","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","mutateAsync","defaultedQueries"],"sources":["/Users/murial/code/murials_menu/node_modules/query-core/build/esm/index.js","/Users/murial/code/murials_menu/node_modules/react-query/src/QueryClientProvider.tsx","/Users/murial/code/murials_menu/node_modules/react-query/src/isRestoring.tsx","/Users/murial/code/murials_menu/node_modules/react-query/src/QueryErrorResetBoundary.tsx","/Users/murial/code/murials_menu/node_modules/react-query/src/utils.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useBaseQuery.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/Hydrate.tsx","/Users/murial/code/murials_menu/node_modules/react-query/src/useMutation.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useInfiniteQuery.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useIsFetching.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useIsMutating.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useQueries.ts","/Users/murial/code/murials_menu/node_modules/react-query/src/useQuery.ts"],"sourcesContent":["/**\n * query-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nclass Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\n// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined';\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nconst defaultLogger = console;\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState$1(this.options);\n    this.state = this.initialState;\n    this.meta = config.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.meta = options == null ? void 0 : options.meta;\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on2, _this$cache$config2;\n\n        if (typeof data === 'undefined') {\n          onError(new Error('Query data cannot be undefined'));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: () => {\n        this.dispatch({\n          type: 'failed'\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: state.fetchFailureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState$1(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasInitialData = typeof options.initialData !== 'undefined';\n  const initialDataUpdatedAt = hasInitialData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  const hasData = typeof data !== 'undefined';\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.options = { ...config.defaultOptions,\n      ...config.options\n    };\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.meta = config.meta;\n    this.updateCacheTime(this.options.cacheTime);\n    this.scheduleGc();\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    if (this.retryer) {\n      this.retryer.continue();\n      return this.retryer.promise;\n    }\n\n    return this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: () => {\n          this.dispatch({\n            type: 'failed'\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        (_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this);\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      (_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this);\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        (_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: state.failureCount + 1\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined,\n      meta: options.meta\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n    return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n  }\n\n}\n\nfunction infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n  }\n\n  mount() {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n        }\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            placeholderData = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$data, _state$data2, _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward',\n      isFetchingPreviousPage: state.fetchStatus === 'fetching' && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward'\n    };\n  }\n\n}\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    this.options = this.client.defaultMutationOptions(options);\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}\n\nexport { CancelledError, InfiniteQueryObserver, MutationCache, MutationObserver, QueriesObserver, QueryCache, QueryClient, QueryObserver, dehydrate, focusManager, hashQueryKey, hydrate, isCancelledError, isError, notifyManager, onlineManager, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs };\n//# sourceMappingURL=index.js.map\n","import * as React from 'react'\n\nimport { QueryClient } from '@tanstack/query-core'\nimport { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import * as React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport { QueryKey, notifyManager, QueryObserver } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { shouldThrowError } from './utils'\nimport { useIsRestoring } from './isRestoring'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (\n    defaultedOptions.suspense &&\n    result.isLoading &&\n    result.isFetching &&\n    !isRestoring\n  ) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch((error) => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(defaultedOptions.useErrorBoundary, [\n      result.error,\n      observer.getCurrentQuery(),\n    ])\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import * as React from 'react'\n\nimport { hydrate, HydrateOptions } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n  MutationFunction,\n  MutationKey,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import {\n  QueryObserver,\n  InfiniteQueryObserver,\n  QueryFunction,\n  QueryKey,\n  parseQueryArgs,\n} from '@tanstack/query-core'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import * as React from 'react'\nimport {\n  QueryKey,\n  notifyManager,\n  parseFilterArgs,\n  QueryFilters,\n} from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  notifyManager,\n  MutationKey,\n  MutationFilters,\n  parseMutationFilterArgs,\n} from '@tanstack/query-core'\nimport { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim'\n\nimport {\n  QueryKey,\n  QueryFunction,\n  notifyManager,\n  QueriesObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  return result as QueriesResults<T>\n}\n","import {\n  parseQueryArgs,\n  QueryFunction,\n  QueryKey,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport { DefinedUseQueryResult, UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"]},"metadata":{},"sourceType":"script"}